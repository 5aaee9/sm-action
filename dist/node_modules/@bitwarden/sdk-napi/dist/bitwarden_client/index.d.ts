import * as rust from "../../binding";
import { LogLevel } from "../../binding";
import { ClientSettings, ResponseForAPIKeyLoginResponse, ResponseForPasswordLoginResponse, ResponseForSecretIdentifiersResponse, ResponseForSecretResponse, ResponseForSecretsDeleteResponse, ResponseForSyncResponse } from "./schemas";
export declare class BitwardenClient {
    client: rust.BitwardenClient;
    constructor(settings?: ClientSettings, loggingLevel?: LogLevel);
    login(email: string, password: string): Promise<ResponseForPasswordLoginResponse>;
    loginWithAccessToken(accessToken: string): Promise<ResponseForAPIKeyLoginResponse>;
    sync(excludeSubdomains?: boolean): Promise<ResponseForSyncResponse>;
    secrets(): SecretsClient;
}
export declare class SecretsClient {
    client: rust.BitwardenClient;
    constructor(client: rust.BitwardenClient);
    get(id: string): Promise<ResponseForSecretResponse>;
    create(key: string, note: string, organizationId: string, value: string): Promise<ResponseForSecretResponse>;
    list(organizationId: string): Promise<ResponseForSecretIdentifiersResponse>;
    update(id: string, key: string, note: string, organizationId: string, value: string): Promise<ResponseForSecretResponse>;
    delete(ids: string[]): Promise<ResponseForSecretsDeleteResponse>;
}
