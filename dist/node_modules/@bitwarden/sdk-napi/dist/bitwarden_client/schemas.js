"use strict";
// To parse this data:
//
//   import { Convert, ClientSettings, Command, ResponseForAPIKeyLoginResponse, ResponseForPasswordLoginResponse, ResponseForSecretDeleteResponse, ResponseForSecretIdentifierResponse, ResponseForSecretIdentifiersResponse, ResponseForSecretResponse, ResponseForSecretsDeleteResponse, ResponseForSyncResponse, ResponseForUserAPIKeyResponse } from "./file";
//
//   const clientSettings = Convert.toClientSettings(json);
//   const command = Convert.toCommand(json);
//   const responseForAPIKeyLoginResponse = Convert.toResponseForAPIKeyLoginResponse(json);
//   const responseForPasswordLoginResponse = Convert.toResponseForPasswordLoginResponse(json);
//   const responseForSecretDeleteResponse = Convert.toResponseForSecretDeleteResponse(json);
//   const responseForSecretIdentifierResponse = Convert.toResponseForSecretIdentifierResponse(json);
//   const responseForSecretIdentifiersResponse = Convert.toResponseForSecretIdentifiersResponse(json);
//   const responseForSecretResponse = Convert.toResponseForSecretResponse(json);
//   const responseForSecretsDeleteResponse = Convert.toResponseForSecretsDeleteResponse(json);
//   const responseForSyncResponse = Convert.toResponseForSyncResponse(json);
//   const responseForUserAPIKeyResponse = Convert.toResponseForUserAPIKeyResponse(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Convert = exports.DeviceType = void 0;
/**
 * Device type to send to Bitwarden. Defaults to SDK
 */
var DeviceType;
(function (DeviceType) {
    DeviceType["Android"] = "Android";
    DeviceType["AndroidAmazon"] = "AndroidAmazon";
    DeviceType["ChromeBrowser"] = "ChromeBrowser";
    DeviceType["ChromeExtension"] = "ChromeExtension";
    DeviceType["EdgeBrowser"] = "EdgeBrowser";
    DeviceType["EdgeExtension"] = "EdgeExtension";
    DeviceType["FirefoxBrowser"] = "FirefoxBrowser";
    DeviceType["FirefoxExtension"] = "FirefoxExtension";
    DeviceType["IEBrowser"] = "IEBrowser";
    DeviceType["IOS"] = "iOS";
    DeviceType["LinuxDesktop"] = "LinuxDesktop";
    DeviceType["MACOSDesktop"] = "MacOsDesktop";
    DeviceType["OperaBrowser"] = "OperaBrowser";
    DeviceType["OperaExtension"] = "OperaExtension";
    DeviceType["SDK"] = "SDK";
    DeviceType["SafariBrowser"] = "SafariBrowser";
    DeviceType["SafariExtension"] = "SafariExtension";
    DeviceType["UWP"] = "UWP";
    DeviceType["UnknownBrowser"] = "UnknownBrowser";
    DeviceType["VivaldiBrowser"] = "VivaldiBrowser";
    DeviceType["VivaldiExtension"] = "VivaldiExtension";
    DeviceType["WindowsDesktop"] = "WindowsDesktop";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
class Convert {
    static toClientSettings(json) {
        return cast(JSON.parse(json), r("ClientSettings"));
    }
    static clientSettingsToJson(value) {
        return JSON.stringify(uncast(value, r("ClientSettings")), null, 2);
    }
    static toCommand(json) {
        return cast(JSON.parse(json), r("Command"));
    }
    static commandToJson(value) {
        return JSON.stringify(uncast(value, r("Command")), null, 2);
    }
    static toResponseForAPIKeyLoginResponse(json) {
        return cast(JSON.parse(json), r("ResponseForAPIKeyLoginResponse"));
    }
    static responseForAPIKeyLoginResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForAPIKeyLoginResponse")), null, 2);
    }
    static toResponseForPasswordLoginResponse(json) {
        return cast(JSON.parse(json), r("ResponseForPasswordLoginResponse"));
    }
    static responseForPasswordLoginResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForPasswordLoginResponse")), null, 2);
    }
    static toResponseForSecretDeleteResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretDeleteResponse"));
    }
    static responseForSecretDeleteResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretDeleteResponse")), null, 2);
    }
    static toResponseForSecretIdentifierResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretIdentifierResponse"));
    }
    static responseForSecretIdentifierResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretIdentifierResponse")), null, 2);
    }
    static toResponseForSecretIdentifiersResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretIdentifiersResponse"));
    }
    static responseForSecretIdentifiersResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretIdentifiersResponse")), null, 2);
    }
    static toResponseForSecretResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretResponse"));
    }
    static responseForSecretResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretResponse")), null, 2);
    }
    static toResponseForSecretsDeleteResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSecretsDeleteResponse"));
    }
    static responseForSecretsDeleteResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSecretsDeleteResponse")), null, 2);
    }
    static toResponseForSyncResponse(json) {
        return cast(JSON.parse(json), r("ResponseForSyncResponse"));
    }
    static responseForSyncResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForSyncResponse")), null, 2);
    }
    static toResponseForUserAPIKeyResponse(json) {
        return cast(JSON.parse(json), r("ResponseForUserAPIKeyResponse"));
    }
    static responseForUserAPIKeyResponseToJson(value) {
        return JSON.stringify(uncast(value, r("ResponseForUserAPIKeyResponse")), null, 2);
    }
}
exports.Convert = Convert;
function invalidValue(typ, val, key, parent = '') {
    const prettyTyp = prettyTypeName(typ);
    const parentText = parent ? ` on ${parent}` : '';
    const keyText = key ? ` for key "${key}"` : '';
    throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);
}
function prettyTypeName(typ) {
    if (Array.isArray(typ)) {
        if (typ.length === 2 && typ[0] === undefined) {
            return `an optional ${prettyTypeName(typ[1])}`;
        }
        else {
            return `one of [${typ.map(a => { return prettyTypeName(a); }).join(", ")}]`;
        }
    }
    else if (typeof typ === "object" && typ.literal !== undefined) {
        return typ.literal;
    }
    else {
        return typeof typ;
    }
}
function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}
function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        const map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}
function transform(val, typ, getProps, key = '', parent = '') {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        const l = typs.length;
        for (let i = 0; i < l; i++) {
            const typ = typs[i];
            try {
                return transform(val, typ, getProps);
            }
            catch (_) { }
        }
        return invalidValue(typs, val, key, parent);
    }
    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1)
            return val;
        return invalidValue(cases.map(a => { return l(a); }), val, key, parent);
    }
    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val))
            return invalidValue(l("array"), val, key, parent);
        return val.map(el => transform(el, typ, getProps));
    }
    function transformDate(val) {
        if (val === null) {
            return null;
        }
        const d = new Date(val);
        if (isNaN(d.valueOf())) {
            return invalidValue(l("Date"), val, key, parent);
        }
        return d;
    }
    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue(l(ref || "object"), val, key, parent);
        }
        const result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps, key, ref);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps, key, ref);
            }
        });
        return result;
    }
    if (typ === "any")
        return val;
    if (typ === null) {
        if (val === null)
            return val;
        return invalidValue(typ, val, key, parent);
    }
    if (typ === false)
        return invalidValue(typ, val, key, parent);
    let ref = undefined;
    while (typeof typ === "object" && typ.ref !== undefined) {
        ref = typ.ref;
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ))
        return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val)
                : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val)
                    : invalidValue(typ, val, key, parent);
    }
    // Numbers can be parsed by Date but shouldn't be.
    if (typ === Date && typeof val !== "number")
        return transformDate(val);
    return transformPrimitive(typ, val);
}
function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}
function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}
function l(typ) {
    return { literal: typ };
}
function a(typ) {
    return { arrayItems: typ };
}
function u(...typs) {
    return { unionMembers: typs };
}
function o(props, additional) {
    return { props, additional };
}
function m(additional) {
    return { props: [], additional };
}
function r(name) {
    return { ref: name };
}
const typeMap = {
    "ClientSettings": o([
        { json: "apiUrl", js: "apiUrl", typ: "" },
        { json: "deviceType", js: "deviceType", typ: r("DeviceType") },
        { json: "identityUrl", js: "identityUrl", typ: "" },
        { json: "userAgent", js: "userAgent", typ: "" },
    ], false),
    "Command": o([
        { json: "passwordLogin", js: "passwordLogin", typ: u(undefined, r("PasswordLoginRequest")) },
        { json: "apiKeyLogin", js: "apiKeyLogin", typ: u(undefined, r("APIKeyLoginRequest")) },
        { json: "accessTokenLogin", js: "accessTokenLogin", typ: u(undefined, r("AccessTokenLoginRequest")) },
        { json: "getUserApiKey", js: "getUserApiKey", typ: u(undefined, r("SecretVerificationRequest")) },
        { json: "sync", js: "sync", typ: u(undefined, r("SyncRequest")) },
        { json: "secrets", js: "secrets", typ: u(undefined, r("SecretsCommand")) },
        { json: "projects", js: "projects", typ: u(undefined, r("ProjectsCommand")) },
    ], false),
    "AccessTokenLoginRequest": o([
        { json: "accessToken", js: "accessToken", typ: "" },
    ], false),
    "APIKeyLoginRequest": o([
        { json: "clientId", js: "clientId", typ: "" },
        { json: "clientSecret", js: "clientSecret", typ: "" },
        { json: "password", js: "password", typ: "" },
    ], false),
    "SecretVerificationRequest": o([
        { json: "masterPassword", js: "masterPassword", typ: u(undefined, u(null, "")) },
        { json: "otp", js: "otp", typ: u(undefined, u(null, "")) },
    ], false),
    "PasswordLoginRequest": o([
        { json: "email", js: "email", typ: "" },
        { json: "password", js: "password", typ: "" },
    ], false),
    "ProjectsCommand": o([
        { json: "get", js: "get", typ: u(undefined, r("ProjectGetRequest")) },
        { json: "list", js: "list", typ: u(undefined, r("ProjectsListRequest")) },
    ], false),
    "ProjectGetRequest": o([
        { json: "id", js: "id", typ: "" },
    ], false),
    "ProjectsListRequest": o([
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "SecretsCommand": o([
        { json: "get", js: "get", typ: u(undefined, r("SecretGetRequest")) },
        { json: "create", js: "create", typ: u(undefined, r("SecretCreateRequest")) },
        { json: "list", js: "list", typ: u(undefined, r("SecretIdentifiersRequest")) },
        { json: "update", js: "update", typ: u(undefined, r("SecretPutRequest")) },
        { json: "delete", js: "delete", typ: u(undefined, r("SecretsDeleteRequest")) },
    ], false),
    "SecretCreateRequest": o([
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "value", js: "value", typ: "" },
    ], false),
    "SecretsDeleteRequest": o([
        { json: "ids", js: "ids", typ: a("") },
    ], false),
    "SecretGetRequest": o([
        { json: "id", js: "id", typ: "" },
    ], false),
    "SecretIdentifiersRequest": o([
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "SecretPutRequest": o([
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "value", js: "value", typ: "" },
    ], false),
    "SyncRequest": o([
        { json: "excludeSubdomains", js: "excludeSubdomains", typ: u(undefined, u(true, null)) },
    ], false),
    "ResponseForAPIKeyLoginResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("APIKeyLoginResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "APIKeyLoginResponse": o([
        { json: "authenticated", js: "authenticated", typ: true },
        { json: "forcePasswordReset", js: "forcePasswordReset", typ: true },
        { json: "resetMasterPassword", js: "resetMasterPassword", typ: true },
        { json: "twoFactor", js: "twoFactor", typ: u(undefined, u(r("APIKeyLoginResponseTwoFactorProviders"), null)) },
    ], false),
    "APIKeyLoginResponseTwoFactorProviders": o([
        { json: "authenticator", js: "authenticator", typ: u(undefined, u(r("PurpleAuthenticator"), null)) },
        { json: "duo", js: "duo", typ: u(undefined, u(r("PurpleDuo"), null)) },
        { json: "email", js: "email", typ: u(undefined, u(r("PurpleEmail"), null)) },
        { json: "organizationDuo", js: "organizationDuo", typ: u(undefined, u(r("PurpleDuo"), null)) },
        { json: "remember", js: "remember", typ: u(undefined, u(r("PurpleRemember"), null)) },
        { json: "webAuthn", js: "webAuthn", typ: u(undefined, u(r("PurpleWebAuthn"), null)) },
        { json: "yubiKey", js: "yubiKey", typ: u(undefined, u(r("PurpleYubiKey"), null)) },
    ], false),
    "PurpleAuthenticator": o([], false),
    "PurpleDuo": o([
        { json: "host", js: "host", typ: "" },
        { json: "signature", js: "signature", typ: "" },
    ], false),
    "PurpleEmail": o([
        { json: "email", js: "email", typ: "" },
    ], false),
    "PurpleRemember": o([], false),
    "PurpleWebAuthn": o([], false),
    "PurpleYubiKey": o([
        { json: "nfc", js: "nfc", typ: true },
    ], false),
    "ResponseForPasswordLoginResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("PasswordLoginResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "PasswordLoginResponse": o([
        { json: "authenticated", js: "authenticated", typ: true },
        { json: "captcha", js: "captcha", typ: u(undefined, u(r("CAPTCHAResponse"), null)) },
        { json: "forcePasswordReset", js: "forcePasswordReset", typ: true },
        { json: "resetMasterPassword", js: "resetMasterPassword", typ: true },
        { json: "twoFactor", js: "twoFactor", typ: u(undefined, u(r("PasswordLoginResponseTwoFactorProviders"), null)) },
    ], false),
    "CAPTCHAResponse": o([
        { json: "siteKey", js: "siteKey", typ: "" },
    ], false),
    "PasswordLoginResponseTwoFactorProviders": o([
        { json: "authenticator", js: "authenticator", typ: u(undefined, u(r("FluffyAuthenticator"), null)) },
        { json: "duo", js: "duo", typ: u(undefined, u(r("FluffyDuo"), null)) },
        { json: "email", js: "email", typ: u(undefined, u(r("FluffyEmail"), null)) },
        { json: "organizationDuo", js: "organizationDuo", typ: u(undefined, u(r("FluffyDuo"), null)) },
        { json: "remember", js: "remember", typ: u(undefined, u(r("FluffyRemember"), null)) },
        { json: "webAuthn", js: "webAuthn", typ: u(undefined, u(r("FluffyWebAuthn"), null)) },
        { json: "yubiKey", js: "yubiKey", typ: u(undefined, u(r("FluffyYubiKey"), null)) },
    ], false),
    "FluffyAuthenticator": o([], false),
    "FluffyDuo": o([
        { json: "host", js: "host", typ: "" },
        { json: "signature", js: "signature", typ: "" },
    ], false),
    "FluffyEmail": o([
        { json: "email", js: "email", typ: "" },
    ], false),
    "FluffyRemember": o([], false),
    "FluffyWebAuthn": o([], false),
    "FluffyYubiKey": o([
        { json: "nfc", js: "nfc", typ: true },
    ], false),
    "ResponseForSecretDeleteResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretDeleteResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretDeleteResponse": o([
        { json: "error", js: "error", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: "" },
    ], false),
    "ResponseForSecretIdentifierResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretIdentifierResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretIdentifierResponse": o([
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "ResponseForSecretIdentifiersResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretIdentifiersResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretIdentifiersResponse": o([
        { json: "data", js: "data", typ: a(r("DatumElement")) },
    ], false),
    "DatumElement": o([
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
    ], false),
    "ResponseForSecretResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretResponse": o([
        { json: "creationDate", js: "creationDate", typ: "" },
        { json: "id", js: "id", typ: "" },
        { json: "key", js: "key", typ: "" },
        { json: "note", js: "note", typ: "" },
        { json: "object", js: "object", typ: "" },
        { json: "organizationId", js: "organizationId", typ: "" },
        { json: "projectId", js: "projectId", typ: u(undefined, u(null, "")) },
        { json: "revisionDate", js: "revisionDate", typ: "" },
        { json: "value", js: "value", typ: "" },
    ], false),
    "ResponseForSecretsDeleteResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SecretsDeleteResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SecretsDeleteResponse": o([
        { json: "data", js: "data", typ: a(r("DatumClass")) },
    ], false),
    "DatumClass": o([
        { json: "error", js: "error", typ: u(undefined, u(null, "")) },
        { json: "id", js: "id", typ: "" },
    ], false),
    "ResponseForSyncResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("SyncResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "SyncResponse": o([
        { json: "ciphers", js: "ciphers", typ: a(r("CipherDetailsResponse")) },
        { json: "profile", js: "profile", typ: r("ProfileResponse") },
    ], false),
    "CipherDetailsResponse": o([], false),
    "ProfileResponse": o([
        { json: "email", js: "email", typ: "" },
        { json: "id", js: "id", typ: "" },
        { json: "name", js: "name", typ: "" },
        { json: "organizations", js: "organizations", typ: a(r("ProfileOrganizationResponse")) },
    ], false),
    "ProfileOrganizationResponse": o([
        { json: "id", js: "id", typ: "" },
    ], false),
    "ResponseForUserAPIKeyResponse": o([
        { json: "data", js: "data", typ: u(undefined, u(r("UserAPIKeyResponse"), null)) },
        { json: "errorMessage", js: "errorMessage", typ: u(undefined, u(null, "")) },
        { json: "success", js: "success", typ: true },
    ], false),
    "UserAPIKeyResponse": o([
        { json: "apiKey", js: "apiKey", typ: "" },
    ], false),
    "DeviceType": [
        "Android",
        "AndroidAmazon",
        "ChromeBrowser",
        "ChromeExtension",
        "EdgeBrowser",
        "EdgeExtension",
        "FirefoxBrowser",
        "FirefoxExtension",
        "IEBrowser",
        "iOS",
        "LinuxDesktop",
        "MacOsDesktop",
        "OperaBrowser",
        "OperaExtension",
        "SDK",
        "SafariBrowser",
        "SafariExtension",
        "UWP",
        "UnknownBrowser",
        "VivaldiBrowser",
        "VivaldiExtension",
        "WindowsDesktop",
    ],
};
